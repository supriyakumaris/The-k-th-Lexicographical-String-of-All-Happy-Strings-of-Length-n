1415. The k-th Lexicographical String of All Happy Strings of Length n

c++


#####################################################################################################################################


class Solution {
public:
    string getHappyString(int n, int k) {
        string currentString = "";
        vector<string> happyStrings;
        // Generate all happy strings of length n
        generateHappyStrings(n, currentString, happyStrings);

        // Check if there are at least k happy strings
        if (happyStrings.size() < k) return "";

        // Sort the happy strings in lexicographical order
        sort(happyStrings.begin(), happyStrings.end());

        return happyStrings[k - 1];
    }

private:
    void generateHappyStrings(int n, string currentString,
                              vector<string> &happyStrings) {
        // If the current string has reached the desired length, add it to the
        // list
        if (currentString.size() == n) {
            happyStrings.push_back(currentString);
            return;
        }

        // Try adding each character ('a', 'b', 'c') to the current string
        for (char currentChar = 'a'; currentChar <= 'c'; currentChar++) {
            // Skip if the current character is the same as the last character
            if (currentString.size() > 0 && currentString.back() == currentChar)
                continue;

            // Recursively generate the next character
            generateHappyStrings(n, currentString + currentChar, happyStrings);
        }
    }
};


########################################################################################################################################

/*JAVA*/

class Solution {

    List<String> happyStrings = new ArrayList<>();

    public String getHappyString(int n, int k) {
        String currentString = "";
        // Generate all happy strings of length n
        generateHappyStrings(n, currentString);

        // Check if there are at least k happy strings
        if (happyStrings.size() < k) return "";

        // Sort the happy strings in lexicographical order
        Collections.sort(happyStrings);

        return happyStrings.get(k - 1);
    }

    protected void generateHappyStrings(int n, String currentString) {
        // If the current string has reached the desired length, add it to the
        // list
        if (currentString.length() == n) {
            happyStrings.add(currentString);
            return;
        }

        // Try adding each character ('a', 'b', 'c') to the current string
        for (char currentChar = 'a'; currentChar <= 'c'; currentChar++) {
            // Skip if the current character is the same as the last character
            if (
                currentString.length() > 0 &&
                currentString.charAt(currentString.length() - 1) == currentChar
            ) continue;

            // Recursively generate the next character
            generateHappyStrings(n, currentString + currentChar);
        }
    }
}


####################################################################################################################################################

/*python 3*/

class Solution:
    def getHappyString(self, n: int, k: int) -> str:
        current_string = ""
        happy_strings = []
        # Generate all happy strings of length n
        self.generate_happy_strings(n, current_string, happy_strings)

        # Check if there are at least k happy strings
        if len(happy_strings) < k:
            return ""

        # Sort the happy strings in lexicographical order
        happy_strings.sort()

        return happy_strings[k - 1]

    def generate_happy_strings(
        self, n: int, current_string: str, happy_strings: list
    ):
        # If the current string has reached the desired length, add it to the list
        if len(current_string) == n:
            happy_strings.append(current_string)
            return

        # Try adding each character ('a', 'b', 'c') to the current string
        for current_char in ["a", "b", "c"]:
            # Skip if the current character is the same as the last character
            if len(current_string) > 0 and current_string[-1] == current_char:
                continue

            # Recursively generate the next character
            self.generate_happy_strings(
                n, current_string + current_char, happy_strings
            )
